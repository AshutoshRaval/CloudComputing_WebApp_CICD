name: Packer CI Merged

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build AMI and Share
    runs-on: ubuntu-latest

    steps:
      # - name: Extract AMI ID
      #   id: extract_ami_id
      #   run: |
      #       AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
      #       echo "AMI ID: $AMI_ID"
      #       echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      - name: Install jq
        run: sudo apt-get install jq

      - name: Configure AWS Credentials
        run: |
              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws configure set default.region us-east-1  # Replace with your desired AWS region
              aws configure set default.output json
              aws configure set profile.dev.aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws configure set profile.dev.aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Extract AMI ID
        id: extract_ami_id
        run: |
            AMI_ID=ami-063d60a3265ea3153
            echo "AMI ID: $AMI_ID"
            echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV


      - name: Get Security Group IDs
        id: get_security_groups
        run: |
            # Replace 'your-security-group-names' with the names of your security groups separated by space
            SECURITY_GROUP_NAMES="security-group-name-1 security-group-name-2"
            SECURITY_GROUP_IDS=$(aws ec2 describe-security-groups --group-names $SECURITY_GROUP_NAMES --query "SecurityGroups[*].GroupId" --output text | tr '\t' ' ' | tr '\n' ' ')
            echo "::set-output name=security_group_ids::$SECURITY_GROUP_IDS"

      - name: Get Latest Launch Template Version
        id: get_latest_version
        run: |
          LAUNCH_TEMPLATE_NAME="app-launch-template"
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name "$LAUNCH_TEMPLATE_NAME" --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' --output text)
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_ENV

 # aws ec2 create-launch-template-version --launch-template-id "$LAUNCH_TEMPLATE_ID" --source-version "$LATEST" --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"
      - name: Update Launch Template with Latest AMI
        run: |
          echo "Using AMI ID: $AMI_ID" # For debugging: this line will output the AMI ID in the logs
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?LaunchTemplateName=='app-launch-template'].LaunchTemplateId" --output text)
          LATEST_VERSION=${{ env.latest_version }}
          echo "Using Launch Template ID: $LAUNCH_TEMPLATE_ID" # For debugging
          echo "Using Launch Template ID: $LATEST_VERSION" # For debugging
          aws ec2 create-launch-template-version --launch-template-id "$LAUNCH_TEMPLATE_ID" --source-version "$LATEST_VERSION" --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"
          #INSTANCE_TYPE="t2.micro"
          #KEY_PAIR_NAME="webappKeyPair" # Replace with your key pair name
          #SECURITY_GROUP_IDS=$(echo "${{ steps.get_security_groups.outputs.security_group_ids }}")
          # aws ec2 create-launch-template-version --launch-template-id "$LAUNCH_TEMPLATE_ID" \
          # --source-version "$LATEST" \
          # --launch-template-data "{\"ImageId\":\"$AMI_ID\",\"InstanceType\":\"$INSTANCE_TYPE\",\"KeyName\":\"$KEY_PAIR_NAME\",\"SecurityGroupIds\":[$SECURITY_GROUP_IDS]}"
          # aws ec2 create-launch-template-version --launch-template-id "$LAUNCH_TEMPLATE_ID" --source-version "$LATEST" --launch-template-data "{\"ImageId\":\"$AMI_ID\",\"InstanceType\":\"$INSTANCE_TYPE\"}"

      - name: Retrieve latest Launch Template version
        run: |
          LAUNCH_TEMPLATE_NAME="app-launch-template"
          echo "Launch Template Name: $LAUNCH_TEMPLATE_NAME"
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name "$LAUNCH_TEMPLATE_NAME" --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' --output text)
          echo "Latest Launch Template Version: $LATEST_VERSION"
          echo "LAUNCH_TEMPLATE_NAME=$LAUNCH_TEMPLATE_NAME" >> $GITHUB_ENV
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
      
      - name: Update ASG to use the latest Launch Template version
        run: |
          ASG_NAME="app-auto-scaling-group"
          LAUNCH_TEMPLATE_NAME="${{ env.LAUNCH_TEMPLATE_NAME }}"
          LATEST_VERSION=${{ env.LATEST_VERSION }}
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$ASG_NAME" --launch-template "LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Version=$LATEST_VERSION"
      
      - name: Start Instance Refresh
        run: |
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name "app-auto-scaling-group" --strategy "Rolling" --query 'InstanceRefreshId' --output text)

          echo "Instance Refresh ID: $INSTANCE_REFRESH_ID"
          echo "INSTANCE_REFRESH_ID=$INSTANCE_REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh Completion
        run: |
          while true; do
              STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "app-auto-scaling-group" --instance-refresh-ids "${{ env.INSTANCE_REFRESH_ID }}" --query 'InstanceRefreshes[0].Status' --output text)

              if [ "$STATUS" = "Successful" ]; then
                  echo "Instance refresh completed successfully"
                  break
              elif [ "$STATUS" = "Failed" ]; then
                  echo "Instance refresh failed"
                  exit 1
              else
                  echo "Waiting for instance refresh... Current status: $STATUS"
                  sleep 60
              fi
          done
          